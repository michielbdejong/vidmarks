define(['../util'], function(util) {

  return function() {
    var requestQueue = [];

    function queueRequest(name, args, dontPromise) {
      if(! dontPromise) {
        return util.makePromise(function(promise) {
          requestQueue.push({
            method: name,
            args: args,
            promise: promise
          });
        });
      } else {
        requestQueue.push({
          method: name,
          args: args
        });
      }
    }

    return {
      on: function(eventName, handler) {
        return queueRequest('on', [eventName, handler], true);
      },
      get: function(key) {
        return queueRequest('get', [key]);
      },
      put: function(key, value) {
        return queueRequest('put', [key, value]);
      },
      remove: function(key) {
        return queueRequest('remove', [key]);
      },
      forgetAll: function(key) {
        return queueRequest('forgetAll', []);
      },
      flush: function(adapter) {
        requestQueue.forEach(function(request) {
          if(request.promise) {
            adapter[request.method].apply(adapter, request.args).
              then(request.promise.fulfill.bind(request.promise),
                   request.promise.fail.bind(request.promise));
          } else {
            adapter[request.method].apply(adapter, request.args);
          }
        });
      }
    }
  };

});
