define([], function() {

  var localStorage;

  // node metadata key prefix
  var prefixNodes = 'remote_storage_nodes:';
  // note payload data key prefix
  var prefixNodesData = 'remote_storage_node_data:';

  function isMetadataKey(key) {
    return key.substring(0, prefixNodes.length) == prefixNodes;
  }

  function prefixNode(path) {
    return prefixNodes + path;
  }

  function prefixData(path) {
    return prefixNodesData + path;
  }

  // forward events from other tabs
  if(typeof(window) !== 'undefined') {
    window.addEventListener('storage', function(event) {
      if(isMetadataKey(event.key)) {
        event.path = event.key.replace(new RegExp('^' + prefixNodes), '');
        events.emit('change', event);
      }
    });
  }

  return {
    getAdapter: function(_localStorage) {
      localStorage = _localStorage || window.localStorage;

      if(! localStorage) {
        throw new Error("Not supported: localStorage not found.");
      }

      return {

        on: function(eventName, handler) {
          if(eventName == 'ready') {
            // localStorage is immediately ready.
            setTimeout(handler, 0);
          } else {
            events.on(eventName, handler);
          }
        },

        get: function(path, callback) {
          var rawMetadata = localStorage.getItem(prefixNode(path));
          var payload = localStorage.getItem(prefixData(path));
          var metadata;
          try {
            metadata = JSON.parse(rawMetadata);
          } catch(exc) {
            metadata = null;
          }
          callback(metadata, payload);
        },

        set: function(path, metadata, payload, callback) {
          var rawMetadata = JSON.stringify(metadata);
          localStorage.setItem(prefixNode(path), rawMetadata);
          localStorage.setItem(prefixData(path), payload);
          callback();
        },

        remove: function(path, callback) {
          localStorage.removeItem(prefixNode(path));
          localStorage.removeItem(prefixData(path));
          callback();
        },

        forgetAll: function(callback) {
          var numLocalStorage = localStorage.length;
          var keys = [];
          for(var i=0; i<numLocalStorage; i++) {
            if(localStorage.key(i).substr(0, prefixNodes.length) == prefixNodes ||
               localStorage.key(i).substr(0, prefixNodesData.length) == prefixNodesData) {
              keys.push(localStorage.key(i));
            }
          }

          keys.forEach(function(key) {
            localStorage.removeItem(key);
          });
          callback();
        }
      }
    }
  };
});

