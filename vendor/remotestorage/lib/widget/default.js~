define(['../util', '../assets', '../i18n'], function(util, assets, i18n) {

  /*

    Interface: WidgetView

    A stateful view providing interaction with remotestorage.

    States:
      initial   - not connected
      authing   - in auth flow
      connected - connected to remotestorage, not syncing at the moment
      busy      - connected, syncing at the moment
      offline   - connected, but no network connectivity
      error     - connected, but sync error happened

    Event: connect
    Fired when the "connect" action is caused by the user.
    
    Parameters:
      userAddress - The user address to connect to

    Event: disconnect
    Fired when "disconnect" action is requested.

    Event: sync
    Fired when "sync" action is requested

    Method: display
    Display the widget in "initial" state
    
    Parameters:
    any

    Method: setState
    Set widget state to given value.

    Parameters:
      state - a string. one of the states listed above.

   */

  var t = i18n('widget');

  var events = util.getEventEmitter('connect', 'disconnect', 'sync');

  var browserEvents = [];

  function addEvent(element, eventName, handler) {
    browserEvents.push([element, eventName, handler]);
    element.addEventListener(eventName, handler);
  }

  function clearEvents() {
    browserEvents.forEach(function(event) {
      event[0].removeEventListener(event[1], event[2]);
    });
    browserEvents = [];
  }

  var currentState = 'initial';

  var elements = {};

  var stateViews = {

    initial: function() {
      elements.widget.appendChild(elements.bubble);
      elements.widget.appendChild(elements.cube);

      setBubbleText(t('connect-remotestorage'));
      setBubbleAction(jumpAction('typing'));

      setCubeState('connected');
      setCubeAction(jumpAction('typing'));
    },

    typing: function() {
      elements.widget.appendChild(elements.bubble);
      elements.widget.appendChild(elements.cube);
      setBubbleText(t('connect-remotestorage'));
      elements.bubble.appendChild(elements.connectForm);
      addEvent(elements.connectForm, 'submit', function(event) {
        event.preventDefault();
        events.emit('connect', elements.connectForm.userAddress.value);
      });
    }

  };
  
  function prepareWidget() {
    elements.style = document.createElement('style');
    elements.style.innerHTML = assets.widgetCss;
    // #remotestorage-widget
    elements.widget = document.createElement('div');
    widget.setAttribute('id', 'remotestorage-widget');
    // .cube
    elements.cube = document.createElement('img');
    elements.cube.setAttribute('class', 'cube');
    // .bubble
    elements.bubble = document.createElement('div');
    elements.bubble.setAttribute('class', 'bubble');
    // form.connect
    elements.connectForm = document.createElement('form');
    var userAddressInput = document.createElement('input');
    userAddressInput.setAttribute('type', 'email');
    userAddressInput.setAttribute('placeholder', 'user@host');
    userAddressInput.setAttribute('name', 'userAddress');
    elements.connectForm.appendChild(userAddressInput);
    var connectButton = document.createElement('input');
    connectButton.setAttribute('type', 'submit');
    connectButton.setAttribute('value', t('connect'));
    elements.connectForm.appendChild(connectButton);
  }

  function clearWidget() {
    Array.prototype.slice.forEach(elements.widget.children, function(child) {
      elements.widget.removeChild(child);
    });
    clearEvents();
  }

  function updateWidget() {
    var stateView = stateViews[currentState];
    if(stateView) {
      clearWidget();
      stateView();
    }
  }

  function setBubbleText(text) {
    elements.bubble.innerHTML = text;
  }

  function setBubbleAction(action) {
    addEvent(elements.bubble, 'click', action);
  }

  function setCubeAction(action) {
    addEvent(elements.cube, 'click', action);
  }

  function jumpAction(state) {
    return function(event) {
      if(event) {
        event.preventDefault();
      }
      setState(state);
      return false;
    };
  }

  // PUBLIC

  function display(domId) {
    prepareWidget();
    document.getElementById(domId).appendChild(elements.style);
    document.getElementById(domId).appendChild(elements.widget);
    updateWidget();
  }

  function setState(state) {
    currentState = state;
    updateWidget();
  }

  function displayError(error) {
    alert("ERROR: " + error);
  }

  function redirectTo(url) {
    document.body.innerHTML = "Redirecting to " + url + '...';
    setTimeout(function() {
      document.location = url;
    }, 1500);
  }

  return util.extend({

    display: display,
    setState: setState,
    displayError: displayError,
    redirectTo: redirectTo

  }, events);

});
